project tabletennisDatabase;
package de.tsv_uetersen.tischtennis.database;

define type(enum) Gender {
	MALE,
	FEMALE
}

define table AddressSet (addr__set) {
	primary {
		id (addressSetId) AS ID = auto
	}
}

define table AddressLabel (addr__addr_label) {
	primary {
		id (addressLabelId) AS ID = auto
	}
	data {
		label AS STRING(128)
	}
	indices {
		UNIQUE {label}
	}
}

define table City (addr__city) {
	primary {
		id (cityId) AS ID = auto
	}
	data {
		postcode AS NULLABLE STRING(10) = NULL,
		city AS STRING(255)
	}
}

define table Address (addr__addr) {
	primary {
		Set (addressSetId) AS REFERENCE(AddressSet),
		Label (addressLabelId) AS REFERENCE(AddressLabel)
	}
	data {
		street[2] AS NULLABLE STRING(255) = NULL,
		city (cityId) AS NULLABLE REFERENCE(City) = NULL
	}
}

define table Person (base__person) {
	primary {
		id (personId) AS ID = auto
	}
	data {
		firstname AS STRING(255),
		secondname[3] AS NULLABLE STRING(255) = NULL,
		lastname AS STRING(255),
		birthdate AS NULLABLE DATE = NULL,
		gender AS NULLABLE ENUM(Gender) = NULL,
		addressSet (addressSetId) AS NULLABLE REFERENCE(AddressSet) = NULL
	}
	indices {
		FULLTEXT INDEX {firstname},
		FULLTEXT INDEX {lastname}
	}
}

define table Player (base__player) {
	primary {
		id (playerId) AS REFERENCE(Person)
	}
}

define table Gym (base__gym) {
	primary {
		id (gymId) AS ID = auto
	}
	data {
		name AS STRING(255)
	}
}

define table TrainingsGroup (trn__group) {
	primary {
		id (groupId) AS ID = auto
	}
	data {
		title AS STRING(255),
		description AS NULLABLE TEXT = NULL,
		isActive AS BOOLEAN = TRUE
	}
}

define table Training (trn__training) {
	primary {
		id (trainingId) AS ID = auto
	}
	data {
		dateFrom AS DATETIME,
		dateUntil AS DATETIME,
		location AS NULLABLE REFERENCE(Gym) = NULL
	}
}

define table Guestbook (gb__entry) {
	primary {
		id (guestbookId) AS ID = auto
	}
	data {
		dateEntry (e_date) AS DATETIME,
		authorName AS STRING(255),
		authorIP AS STRING(127),
		isDeleted AS BOOLEAN = FALSE,
		entryTitle (e_title) AS STRING(255),
		entryText (e_text) AS TEXT
	}
	indices {
		INDEX {dateEntry}
	}
}



define select GuestbookEntries(INT offset, INT limit) {
	SELECT				g.id, g.dateEntry, g.authorName, g.entryTitle, g.entryText
	FROM						Guestbook AS g
	WHERE				 g.isDeleted = FALSE
	ORDER BY  g.dateEntry DESC
	LIMIT					offset, limit
} 
