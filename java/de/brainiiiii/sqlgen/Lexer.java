/* The following code was generated by JFlex 1.4.3 on 11.10.13 11:44 */

// Technische Universitaet Muenchen 
// Fakultaet fuer Informatik 
// Riitta Hoellerer
//
// Praktikum des Uebersetzerbaus
// SS 2001
//
// mimalex.flex
// JFlex lexer specification for Mima
//  
// JFlex - The Fast Scanner Generator for Java
//  home page: 
// /usr/proj/uebbau/JFlex/
//
package de.brainiiiii.sqlgen;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11.10.13 11:44 from the specification file
 * <tt>/home/kilian/projects/sqlgen/flex/Scanner.jflex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\7\1\5\1\0\1\7\1\4\22\0\1\60\7\0\1\64"+
    "\1\65\2\0\1\63\1\0\1\62\1\0\1\3\11\2\1\0\1\6"+
    "\1\0\1\70\3\0\1\34\1\50\1\54\1\40\1\41\1\43\1\51"+
    "\1\55\1\36\2\1\1\45\1\56\1\37\1\53\1\1\1\47\1\52"+
    "\1\35\1\46\1\44\1\1\1\57\1\42\1\61\1\1\1\71\1\0"+
    "\1\72\1\0\1\1\1\0\1\11\1\31\1\12\1\22\1\15\1\23"+
    "\1\14\1\1\1\24\1\20\1\13\1\32\1\30\1\25\1\17\1\10"+
    "\1\1\1\16\1\33\1\21\1\27\3\1\1\26\1\1\1\66\1\0"+
    "\1\67\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\5\25\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\0\11\2\1\17\3\2\1\20\33\2\1\21\30\2"+
    "\1\22\1\23\1\2\1\24\1\25\6\2\1\26\1\27"+
    "\1\30\1\2\1\31\2\2\1\32\2\2\1\33\1\34"+
    "\3\2\1\35\4\2\1\36\4\2\1\37\4\2\1\40"+
    "\2\2\1\41\3\2\1\42\3\2\1\43\1\2\1\44"+
    "\1\45\3\2\1\46\1\2\1\47\2\2\1\0\1\50"+
    "\1\51\1\52\1\53\1\54\3\2\1\55\1\2\1\0"+
    "\1\56\1\57\1\60\1\2\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\73\0\73"+
    "\0\u0127\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u05fe\0\u0639"+
    "\0\u0674\0\u06af\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\u084c\0\u0887\0\u08c2\0\u08fd\0\166\0\u0938\0\u0973\0\u09ae"+
    "\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e"+
    "\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\166\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\166\0\166\0\u14f9\0\166\0\166\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\166\0\u170c"+
    "\0\166\0\u1747\0\u1782\0\166\0\u17bd\0\u17f8\0\166\0\166"+
    "\0\u1833\0\u186e\0\u18a9\0\166\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\166\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\166\0\u1abc\0\u1af7"+
    "\0\u1b32\0\u1b6d\0\166\0\u1ba8\0\u1be3\0\166\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\166\0\u1ccf\0\u1d0a\0\u1d45\0\166\0\u1d80\0\166"+
    "\0\166\0\u1dbb\0\u1df6\0\u1e31\0\166\0\u1e6c\0\166\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\166\0\166\0\166\0\166\0\166\0\u1f58"+
    "\0\u1f93\0\u1fce\0\166\0\u2009\0\u2044\0\166\0\166\0\166"+
    "\0\u207f\0\73\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\7"+
    "\1\11\1\12\3\3\1\13\3\3\1\14\1\15\1\3"+
    "\1\16\7\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\3\1\25\1\26\1\27\1\30\1\3\1\31\1\3"+
    "\1\32\1\33\1\34\2\3\1\35\1\7\1\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\74\0\3\3\4\0\50\3\1\0\1\3\13\0\2\4"+
    "\74\0\1\47\66\0\3\3\4\0\1\3\1\50\4\3"+
    "\1\51\41\3\1\0\1\3\12\0\3\3\4\0\17\3"+
    "\1\52\30\3\1\0\1\3\12\0\3\3\4\0\15\3"+
    "\1\53\32\3\1\0\1\3\12\0\3\3\4\0\1\3"+
    "\1\54\14\3\1\55\31\3\1\0\1\3\12\0\3\3"+
    "\4\0\1\3\1\56\3\3\1\57\42\3\1\0\1\3"+
    "\12\0\3\3\4\0\15\3\1\60\32\3\1\0\1\3"+
    "\12\0\3\3\4\0\25\3\1\61\22\3\1\0\1\3"+
    "\12\0\3\3\4\0\31\3\1\62\4\3\1\63\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\27\3\1\64\1\65"+
    "\17\3\1\0\1\3\12\0\3\3\4\0\34\3\1\66"+
    "\13\3\1\0\1\3\12\0\3\3\4\0\24\3\1\67"+
    "\4\3\1\70\11\3\1\71\4\3\1\0\1\3\12\0"+
    "\3\3\4\0\27\3\1\72\20\3\1\0\1\3\12\0"+
    "\3\3\4\0\24\3\1\73\7\3\1\74\5\3\1\75"+
    "\5\3\1\0\1\3\12\0\3\3\4\0\27\3\1\76"+
    "\20\3\1\0\1\3\12\0\3\3\4\0\26\3\1\77"+
    "\21\3\1\0\1\3\12\0\3\3\4\0\31\3\1\100"+
    "\10\3\1\101\5\3\1\0\1\3\12\0\3\3\4\0"+
    "\43\3\1\102\4\3\1\0\1\3\12\0\3\3\4\0"+
    "\31\3\1\103\16\3\1\0\1\3\12\0\3\3\4\0"+
    "\42\3\1\104\5\3\1\0\1\3\12\0\3\3\4\0"+
    "\45\3\1\105\2\3\1\0\1\3\12\0\3\3\4\0"+
    "\45\3\1\106\2\3\1\0\1\3\17\0\1\7\65\0"+
    "\3\3\4\0\2\3\1\107\45\3\1\0\1\3\12\0"+
    "\3\3\4\0\7\3\1\110\4\3\1\111\33\3\1\0"+
    "\1\3\12\0\3\3\4\0\11\3\1\112\36\3\1\0"+
    "\1\3\12\0\3\3\4\0\17\3\1\113\30\3\1\0"+
    "\1\3\12\0\3\3\4\0\21\3\1\114\26\3\1\0"+
    "\1\3\12\0\3\3\4\0\1\115\47\3\1\0\1\3"+
    "\12\0\3\3\4\0\11\3\1\116\36\3\1\0\1\3"+
    "\12\0\3\3\4\0\13\3\1\117\34\3\1\0\1\3"+
    "\12\0\3\3\4\0\12\3\1\120\35\3\1\0\1\3"+
    "\12\0\3\3\4\0\44\3\1\121\3\3\1\0\1\3"+
    "\12\0\3\3\4\0\35\3\1\122\12\3\1\0\1\3"+
    "\12\0\3\3\4\0\42\3\1\123\5\3\1\0\1\3"+
    "\12\0\3\3\4\0\30\3\1\124\5\3\1\125\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\126\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\127\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\25\3\1\130\22\3"+
    "\1\0\1\3\12\0\3\3\4\0\34\3\1\131\13\3"+
    "\1\0\1\3\12\0\3\3\4\0\34\3\1\132\13\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\133\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\134\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\43\3\1\135\4\3"+
    "\1\0\1\3\12\0\3\3\4\0\26\3\1\136\21\3"+
    "\1\0\1\3\12\0\3\3\4\0\46\3\1\137\1\3"+
    "\1\0\1\3\12\0\3\3\4\0\32\3\1\140\15\3"+
    "\1\0\1\3\12\0\3\3\4\0\34\3\1\141\13\3"+
    "\1\0\1\3\12\0\3\3\4\0\43\3\1\142\4\3"+
    "\1\0\1\3\12\0\3\3\4\0\33\3\1\143\14\3"+
    "\1\0\1\3\12\0\3\3\4\0\30\3\1\144\17\3"+
    "\1\0\1\3\12\0\3\3\4\0\24\3\1\145\23\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\146\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\3\3\1\147\44\3"+
    "\1\0\1\3\12\0\3\3\4\0\10\3\1\150\37\3"+
    "\1\0\1\3\12\0\3\3\4\0\20\3\1\151\27\3"+
    "\1\0\1\3\12\0\3\3\4\0\7\3\1\152\40\3"+
    "\1\0\1\3\12\0\3\3\4\0\20\3\1\153\27\3"+
    "\1\0\1\3\12\0\3\3\4\0\22\3\1\154\25\3"+
    "\1\0\1\3\12\0\3\3\4\0\5\3\1\155\42\3"+
    "\1\0\1\3\12\0\3\3\4\0\1\3\1\156\46\3"+
    "\1\0\1\3\12\0\3\3\4\0\14\3\1\157\33\3"+
    "\1\0\1\3\12\0\3\3\4\0\14\3\1\160\33\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\161\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\26\3\1\162\21\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\163\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\164\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\165\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\166\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\44\3\1\167\3\3"+
    "\1\0\1\3\12\0\3\3\4\0\40\3\1\170\7\3"+
    "\1\0\1\3\12\0\3\3\4\0\46\3\1\171\1\3"+
    "\1\0\1\3\12\0\3\3\4\0\25\3\1\172\22\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\173\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\46\3\1\174\1\3"+
    "\1\0\1\3\12\0\3\3\4\0\37\3\1\175\10\3"+
    "\1\0\1\3\12\0\3\3\4\0\26\3\1\176\21\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\177\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\200\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\201\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\202\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\203\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\42\3\1\204\5\3"+
    "\1\0\1\3\12\0\3\3\4\0\42\3\1\205\5\3"+
    "\1\0\1\3\12\0\3\3\4\0\1\3\1\206\46\3"+
    "\1\0\1\3\12\0\3\3\4\0\5\3\1\207\42\3"+
    "\1\0\1\3\12\0\3\3\4\0\1\3\1\210\46\3"+
    "\1\0\1\3\12\0\3\3\4\0\5\3\1\211\42\3"+
    "\1\0\1\3\12\0\3\3\4\0\15\3\1\212\32\3"+
    "\1\0\1\3\12\0\3\3\4\0\2\3\1\213\45\3"+
    "\1\0\1\3\12\0\3\3\4\0\44\3\1\214\3\3"+
    "\1\0\1\3\12\0\3\3\4\0\27\3\1\215\20\3"+
    "\1\0\1\3\12\0\3\3\4\0\32\3\1\216\15\3"+
    "\1\0\1\3\12\0\3\3\4\0\41\3\1\217\6\3"+
    "\1\0\1\3\12\0\3\3\4\0\24\3\1\220\23\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\221\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\35\3\1\222\12\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\223\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\224\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\34\3\1\225\13\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\226\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\227\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\42\3\1\230\5\3"+
    "\1\0\1\3\12\0\3\3\4\0\42\3\1\231\5\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\232\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\4\3\1\233\43\3"+
    "\1\0\1\3\12\0\3\3\4\0\2\3\1\234\45\3"+
    "\1\0\1\3\12\0\3\3\4\0\6\3\1\235\41\3"+
    "\1\0\1\3\12\0\3\3\4\0\5\3\1\236\42\3"+
    "\1\0\1\3\12\0\3\3\4\0\5\3\1\237\42\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\240\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\41\3\1\241\6\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\242\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\40\3\1\243\7\3"+
    "\1\0\1\3\12\0\3\3\4\0\26\3\1\244\21\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\245\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\246\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\247\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\24\3\1\250\23\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\251\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\50\3\1\252\1\3"+
    "\12\0\3\3\4\0\5\3\1\253\42\3\1\0\1\3"+
    "\12\0\3\3\4\0\11\3\1\254\36\3\1\0\1\3"+
    "\12\0\3\3\4\0\16\3\1\255\31\3\1\0\1\3"+
    "\12\0\3\3\4\0\23\3\1\256\24\3\1\0\1\3"+
    "\12\0\3\3\4\0\42\3\1\257\5\3\1\0\1\3"+
    "\12\0\3\3\4\0\35\3\1\260\12\3\1\0\1\3"+
    "\12\0\3\3\4\0\46\3\1\261\1\3\1\0\1\3"+
    "\12\0\3\3\4\0\32\3\1\262\15\3\1\0\1\3"+
    "\12\0\3\3\4\0\27\3\1\263\20\3\1\0\1\3"+
    "\12\0\3\3\4\0\27\3\1\264\20\3\1\0\1\3"+
    "\61\0\1\265\23\0\3\3\4\0\31\3\1\266\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\31\3\1\267\16\3"+
    "\1\0\1\3\12\0\3\3\4\0\36\3\1\270\11\3"+
    "\1\0\1\3\12\0\3\3\4\0\44\3\1\271\3\3"+
    "\1\0\1\3\72\0\1\272\12\0\3\3\4\0\31\3"+
    "\1\273\16\3\1\0\1\3\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8378];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\2\11\25\1\11\11"+
    "\1\0\202\1\1\0\12\1\1\0\4\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[187];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
  }
  
  private Symbol symbol(int sym, Object val) {
    return new Symbol(sym, yyline+1, yycolumn+1, val);
  }
  
  private void error(String message) {
    System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { /* ignore */
          }
        case 51: break;
        case 28: 
          { return symbol(BOOLCONST, new Boolean(true));
          }
        case 52: break;
        case 47: 
          { return symbol(DATETIME);
          }
        case 53: break;
        case 11: 
          { return symbol(CLOSE);
          }
        case 54: break;
        case 36: 
          { return symbol(SQL_SELECT);
          }
        case 55: break;
        case 6: 
          { return symbol(DOT);
          }
        case 56: break;
        case 30: 
          { return symbol(TABLE);
          }
        case 57: break;
        case 49: 
          { return symbol(SQL_ORDER);
          }
        case 58: break;
        case 23: 
          { return symbol(DATE);
          }
        case 59: break;
        case 7: 
          { return symbol(COMMA);
          }
        case 60: break;
        case 31: 
          { return symbol(INDEX);
          }
        case 61: break;
        case 41: 
          { return symbol(PROJECT);
          }
        case 62: break;
        case 20: 
          { return symbol(TYPE);
          }
        case 63: break;
        case 13: 
          { return symbol(OLBRACE);
          }
        case 64: break;
        case 38: 
          { return symbol(DOUBLE);
          }
        case 65: break;
        case 27: 
          { return symbol(TEXT);
          }
        case 66: break;
        case 48: 
          { return symbol(FULLTEXT);
          }
        case 67: break;
        case 9: 
          { return symbol(RBRACE);
          }
        case 68: break;
        case 44: 
          { return symbol(INT);
          }
        case 69: break;
        case 3: 
          { return symbol(INTCONST, new Integer(Integer.parseInt(yytext())));
          }
        case 70: break;
        case 35: 
          { return symbol(DEFINE);
          }
        case 71: break;
        case 1: 
          { /* throw new Error("Illegal character <"+ yytext()+">");*/
		    error("Illegal character <"+ yytext()+">");
          }
        case 72: break;
        case 42: 
          { return symbol(PRIMARY);
          }
        case 73: break;
        case 32: 
          { return symbol(BOOLCONST, new Boolean(false));
          }
        case 74: break;
        case 29: 
          { return symbol(CHAR);
          }
        case 75: break;
        case 45: 
          { return symbol(BOOL);
          }
        case 76: break;
        case 33: 
          { return symbol(SQL_LIMIT);
          }
        case 77: break;
        case 12: 
          { return symbol(EQ);
          }
        case 78: break;
        case 37: 
          { return symbol(STRING);
          }
        case 79: break;
        case 19: 
          { return symbol(ENUM_DEF);
          }
        case 80: break;
        case 10: 
          { return symbol(OPEN);
          }
        case 81: break;
        case 34: 
          { return symbol(SQL_WHERE);
          }
        case 82: break;
        case 25: 
          { return symbol(ENUM);
          }
        case 83: break;
        case 26: 
          { return symbol(SQL_FROM);
          }
        case 84: break;
        case 21: 
          { return symbol(DATA);
          }
        case 85: break;
        case 15: 
          { return symbol(AS);
          }
        case 86: break;
        case 16: 
          { return symbol(ID);
          }
        case 87: break;
        case 14: 
          { return symbol(ORBRACE);
          }
        case 88: break;
        case 46: 
          { return symbol(NULLABLE);
          }
        case 89: break;
        case 22: 
          { return symbol(NULL);
          }
        case 90: break;
        case 2: 
          { return symbol(IDENT, yytext());
          }
        case 91: break;
        case 40: 
          { return symbol(PACKAGE);
          }
        case 92: break;
        case 18: 
          { return symbol(AUTO_ID);
          }
        case 93: break;
        case 43: 
          { return symbol(INDICES);
          }
        case 94: break;
        case 8: 
          { return symbol(LBRACE);
          }
        case 95: break;
        case 17: 
          { return symbol(SQL_ASC);
          }
        case 96: break;
        case 50: 
          { return symbol(REFERENCE);
          }
        case 97: break;
        case 5: 
          { return symbol(SC);
          }
        case 98: break;
        case 39: 
          { return symbol(UNIQUE);
          }
        case 99: break;
        case 24: 
          { return symbol(SQL_DESC);
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
