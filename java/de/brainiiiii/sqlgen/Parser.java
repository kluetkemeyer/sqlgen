
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Fri Oct 11 11:54:35 CEST 2013
//----------------------------------------------------

package de.brainiiiii.sqlgen;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Fri Oct 11 11:54:35 CEST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\003\007\000\002\002\004\000\002\016" +
    "\005\000\002\016\003\000\002\004\006\000\002\004\002" +
    "\000\002\005\005\000\002\005\002\000\002\006\007\000" +
    "\002\006\012\000\002\007\005\000\002\007\003\000\002" +
    "\030\005\000\002\030\004\000\002\030\002\000\002\010" +
    "\005\000\002\010\002\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\002\000\002\012\004\000\002\012\003\000\002" +
    "\013\006\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\006\000\002\013\006\000\002\013\010\000\002" +
    "\014\013\000\002\015\005\000\002\015\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\004" +
    "\000\002\020\003\000\002\021\013\000\002\027\011\000" +
    "\002\022\006\000\002\022\002\000\002\023\006\000\002" +
    "\023\002\000\002\024\006\000\002\024\002\000\002\026" +
    "\005\000\002\026\003\000\002\025\007\000\002\025\006" +
    "\000\002\025\007\000\002\025\006\000\002\031\010\000" +
    "\002\033\004\000\002\033\002\000\002\032\004\000\002" +
    "\032\002\000\002\035\006\000\002\035\002\000\002\034" +
    "\004\000\002\034\002\000\002\037\005\000\002\037\003" +
    "\000\002\044\005\000\002\044\003\000\002\042\005\000" +
    "\002\042\003\000\002\036\005\000\002\036\003\000\002" +
    "\045\004\000\002\045\004\000\002\040\003\000\002\040" +
    "\003\000\002\043\005\000\002\041\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\005\004\001\002\000\004\054\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\044\010\001\002\000\006\004\012\006\ufffc\001" +
    "\002\000\004\006\024\001\002\000\004\054\013\001\002" +
    "\000\006\043\015\044\ufffa\001\002\000\004\044\020\001" +
    "\002\000\004\054\016\001\002\000\006\043\015\044\ufffa" +
    "\001\002\000\004\044\ufffb\001\002\000\004\006\ufffd\001" +
    "\002\000\006\002\uffd7\006\uffd7\001\002\000\006\002\uffd6" +
    "\006\uffd6\001\002\000\004\002\001\001\002\000\010\007" +
    "\032\011\031\012\030\001\002\000\006\002\uffd8\006\uffd8" +
    "\001\002\000\006\002\uffd4\006\024\001\002\000\004\002" +
    "\uffd5\001\002\000\004\054\202\001\002\000\004\054\045" +
    "\001\002\000\004\045\033\001\002\000\004\010\034\001" +
    "\002\000\004\046\035\001\002\000\004\054\036\001\002" +
    "\000\004\047\037\001\002\000\004\054\041\001\002\000" +
    "\004\050\044\001\002\000\006\041\042\050\ufffe\001\002" +
    "\000\004\054\041\001\002\000\004\050\uffff\001\002\000" +
    "\006\002\uffdb\006\uffdb\001\002\000\006\045\046\047\ufff1" +
    "\001\002\000\004\054\200\001\002\000\004\047\050\001" +
    "\002\000\012\013\uffd0\014\uffd0\015\051\050\uffd0\001\002" +
    "\000\004\047\175\001\002\000\010\013\uffce\014\053\050" +
    "\uffce\001\002\000\004\047\112\001\002\000\006\013\055" +
    "\050\uffcc\001\002\000\004\047\060\001\002\000\004\050" +
    "\057\001\002\000\006\002\uffd3\006\uffd3\001\002\000\010" +
    "\017\064\020\063\021\062\001\002\000\006\041\110\050" +
    "\uffca\001\002\000\006\017\101\020\100\001\002\000\004" +
    "\047\075\001\002\000\004\047\067\001\002\000\004\050" +
    "\066\001\002\000\004\050\uffcd\001\002\000\004\054\071" +
    "\001\002\000\006\041\072\050\073\001\002\000\006\041" +
    "\uffd9\050\uffd9\001\002\000\004\054\074\001\002\000\006" +
    "\041\uffc6\050\uffc6\001\002\000\006\041\uffda\050\uffda\001" +
    "\002\000\004\054\071\001\002\000\006\041\072\050\077" +
    "\001\002\000\006\041\uffc8\050\uffc8\001\002\000\004\047" +
    "\105\001\002\000\004\047\102\001\002\000\004\054\071" +
    "\001\002\000\006\041\072\050\104\001\002\000\006\041" +
    "\uffc7\050\uffc7\001\002\000\004\054\071\001\002\000\006" +
    "\041\072\050\107\001\002\000\006\041\uffc9\050\uffc9\001" +
    "\002\000\010\017\064\020\063\021\062\001\002\000\004" +
    "\050\uffcb\001\002\000\004\054\115\001\002\000\010\041" +
    "\ufff6\046\ufff6\050\ufff6\001\002\000\006\041\172\050\173" +
    "\001\002\000\010\016\ufff1\045\046\051\116\001\002\000" +
    "\004\053\164\001\002\000\004\016\120\001\002\000\034" +
    "\024\134\025\132\026\127\027\123\030\126\031\137\032" +
    "\130\033\135\034\124\035\122\036\125\037\121\040\131" +
    "\001\002\000\004\045\161\001\002\000\012\041\uffe5\042" +
    "\uffe5\046\uffe5\050\uffe5\001\002\000\012\041\uffe4\042\uffe4" +
    "\046\uffe4\050\uffe4\001\002\000\012\041\uffe7\042\uffe7\046" +
    "\uffe7\050\uffe7\001\002\000\012\041\uffe6\042\uffe6\046\uffe6" +
    "\050\uffe6\001\002\000\012\041\uffe3\042\uffe3\046\uffe3\050" +
    "\uffe3\001\002\000\004\045\156\001\002\000\012\041\uffdf" +
    "\042\uffdf\046\uffdf\050\uffdf\001\002\000\004\045\150\001" +
    "\002\000\012\041\uffe0\042\uffe0\046\uffe0\050\uffe0\001\002" +
    "\000\012\041\uffe9\042\uffe9\046\uffe9\050\uffe9\001\002\000" +
    "\032\025\132\026\127\027\123\030\126\031\137\032\130" +
    "\033\135\034\124\035\122\036\125\037\121\040\131\001" +
    "\002\000\012\041\uffe1\042\uffe1\046\uffe1\050\uffe1\001\002" +
    "\000\012\041\uffeb\042\141\046\uffeb\050\uffeb\001\002\000" +
    "\012\041\uffe2\042\uffe2\046\uffe2\050\uffe2\001\002\000\010" +
    "\041\ufff9\046\ufff9\050\ufff9\001\002\000\014\022\146\023" +
    "\144\053\142\055\145\056\143\001\002\000\010\041\uffee" +
    "\046\uffee\050\uffee\001\002\000\010\041\uffed\046\uffed\050" +
    "\uffed\001\002\000\010\041\uffef\046\uffef\050\uffef\001\002" +
    "\000\010\041\uffec\046\uffec\050\uffec\001\002\000\010\041" +
    "\ufff0\046\ufff0\050\ufff0\001\002\000\012\041\uffea\042\uffea" +
    "\046\uffea\050\uffea\001\002\000\004\054\151\001\002\000" +
    "\006\043\153\046\152\001\002\000\012\041\uffdd\042\uffdd" +
    "\046\uffdd\050\uffdd\001\002\000\004\054\154\001\002\000" +
    "\004\046\155\001\002\000\012\041\uffdc\042\uffdc\046\uffdc" +
    "\050\uffdc\001\002\000\004\053\157\001\002\000\004\046" +
    "\160\001\002\000\012\041\uffe8\042\uffe8\046\uffe8\050\uffe8" +
    "\001\002\000\004\054\162\001\002\000\004\046\163\001" +
    "\002\000\012\041\uffde\042\uffde\046\uffde\050\uffde\001\002" +
    "\000\004\052\165\001\002\000\006\016\ufff1\045\046\001" +
    "\002\000\004\016\167\001\002\000\034\024\134\025\132" +
    "\026\127\027\123\030\126\031\137\032\130\033\135\034" +
    "\124\035\122\036\125\037\121\040\131\001\002\000\012" +
    "\041\uffeb\042\141\046\uffeb\050\uffeb\001\002\000\010\041" +
    "\ufff8\046\ufff8\050\ufff8\001\002\000\004\054\115\001\002" +
    "\000\006\013\uffcf\050\uffcf\001\002\000\010\041\ufff7\046" +
    "\ufff7\050\ufff7\001\002\000\004\054\115\001\002\000\006" +
    "\041\172\050\177\001\002\000\010\013\uffd1\014\uffd1\050" +
    "\uffd1\001\002\000\004\046\201\001\002\000\006\016\ufff2" +
    "\047\ufff2\001\002\000\006\045\203\047\ufff3\001\002\000" +
    "\006\046\260\054\115\001\002\000\004\047\205\001\002" +
    "\000\004\057\207\001\002\000\004\050\256\001\002\000" +
    "\006\023\213\054\214\001\002\000\020\016\uffb1\041\uffb1" +
    "\050\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\001\002\000" +
    "\016\041\222\050\uffc3\060\223\061\uffc3\062\uffc3\063\uffc3" +
    "\001\002\000\020\016\220\041\uffb5\050\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\001\002\000\020\016\uffb2\041\uffb2" +
    "\050\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2\001\002\000" +
    "\004\043\216\001\002\000\016\041\uffbb\050\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\001\002\000\004\054\217\001" +
    "\002\000\024\016\uffaf\041\uffaf\050\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\063\uffaf\064\uffaf\065\uffaf\001\002\000\004\054" +
    "\221\001\002\000\016\041\uffb6\050\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\001\002\000\006\023\213\054\214\001" +
    "\002\000\004\054\247\001\002\000\012\050\uffc1\061\226" +
    "\062\uffc1\063\uffc1\001\002\000\010\050\uffbd\062\230\063" +
    "\uffbd\001\002\000\006\023\213\054\214\001\002\000\010" +
    "\050\uffc2\062\uffc2\063\uffc2\001\002\000\004\054\214\001" +
    "\002\000\006\050\uffbf\063\233\001\002\000\004\050\uffc5" +
    "\001\002\000\006\023\213\054\214\001\002\000\004\041" +
    "\235\001\002\000\006\023\213\054\214\001\002\000\004" +
    "\050\uffc0\001\002\000\010\041\uffb9\050\uffb9\063\uffb9\001" +
    "\002\000\006\064\245\065\244\001\002\000\010\041\242" +
    "\050\uffbe\063\uffbe\001\002\000\004\054\214\001\002\000" +
    "\010\041\uffba\050\uffba\063\uffba\001\002\000\010\041\uffb3" +
    "\050\uffb3\063\uffb3\001\002\000\010\041\uffb4\050\uffb4\063" +
    "\uffb4\001\002\000\014\041\253\050\uffc4\061\uffc4\062\uffc4" +
    "\063\uffc4\001\002\000\004\016\251\001\002\000\014\041" +
    "\uffb7\050\uffb7\061\uffb7\062\uffb7\063\uffb7\001\002\000\004" +
    "\054\252\001\002\000\014\041\uffb0\050\uffb0\061\uffb0\062" +
    "\uffb0\063\uffb0\001\002\000\004\054\247\001\002\000\014" +
    "\041\uffb8\050\uffb8\061\uffb8\062\uffb8\063\uffb8\001\002\000" +
    "\016\041\uffbc\050\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\001\002\000\006\002\uffd2\006\uffd2\001\002\000\006\041" +
    "\172\046\261\001\002\000\004\047\ufff4\001\002\000\004" +
    "\047\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\014\014\024\017\025\020\022\021" +
    "\021\027\020\001\001\000\002\001\001\000\004\005\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\024\017\025\020\026" +
    "\021\021\027\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\051\001\001\000\002\001\001\000" +
    "\004\023\053\001\001\000\002\001\001\000\004\024\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\060\026\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\060\026\110\001\001" +
    "\000\002\001\001\000\006\006\112\007\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\135\013" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\146\001" +
    "\001\000\002\001\001\000\004\011\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\165\001" +
    "\001\000\002\001\001\000\006\012\167\013\132\001\001" +
    "\000\004\011\170\001\001\000\002\001\001\000\004\006" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\112\007\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\203" +
    "\001\001\000\006\006\112\007\256\001\001\000\002\001" +
    "\001\000\004\031\205\001\001\000\002\001\001\000\012" +
    "\036\214\037\210\040\211\041\207\001\001\000\002\001" +
    "\001\000\004\033\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\036\254\040\211\041\207\001\001\000\006\042" +
    "\245\043\247\001\001\000\004\032\224\001\001\000\004" +
    "\034\230\001\001\000\006\040\226\041\207\001\001\000" +
    "\002\001\001\000\010\041\237\044\240\045\236\001\001" +
    "\000\004\035\231\001\001\000\002\001\001\000\006\040" +
    "\233\041\207\001\001\000\002\001\001\000\006\040\235" +
    "\041\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\041\237\045\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
  public boolean syntaxErrors;


  Lexer lexer;

  public Parser(Lexer lex) {
    lexer = lex;
  }

  
  public void report_error(String message, Object info) {
    syntaxErrors = true;
    
    System.out.print(message);
    
    if ( !(info instanceof Symbol) ) return;
    Symbol symbol = (Symbol) info;
    
    if ( symbol.left < 0 || symbol.right < 0 ) return;
    
    System.out.println(" at line "+symbol.left+", column "+symbol.right);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sqlColumnExpr ::= IDENT DOT IDENT 
            {
              SqlColumnExpr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlColumnExpr(t, c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*sqlColumnExpr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sqlSelectSource ::= IDENT AS IDENT 
            {
              SqlSelectSource RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlTableSelectSource(n, a, false); 
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*sqlSelectSource*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sqlExpression ::= sqlColumnExpr 
            {
              SqlExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlColumnExpr e = (SqlColumnExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*sqlExpression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sqlExpression ::= NULL 
            {
              SqlExpr RESULT = null;
		 RESULT = new SqlNullExpr(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*sqlExpression*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sqlSelectOrderElement ::= sqlColumnExpr SQL_DESC 
            {
              SqlOrderElement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlColumnExpr c = (SqlColumnExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SqlSelectOrderElement(c, false); 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*sqlSelectOrderElement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sqlSelectOrderElement ::= sqlColumnExpr SQL_ASC 
            {
              SqlOrderElement RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlColumnExpr c = (SqlColumnExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SqlSelectOrderElement(c, true); 
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*sqlSelectOrderElement*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sqlSelectColumn ::= sqlExpression 
            {
              SqlSelectColumn RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlExpr e = (SqlExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlSelectColumn(e, null); 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*sqlSelectColumn*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sqlSelectColumn ::= sqlExpression AS IDENT 
            {
              SqlSelectColumn RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlExpr e = (SqlExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlSelectColumn(e, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*sqlSelectColumn*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sqlSelectSourceList ::= sqlSelectSource 
            {
              SqlSelectSourceList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlSelectSource c = (SqlSelectSource)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlSelectSourceList(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*sqlSelectSourceList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sqlSelectSourceList ::= sqlSelectSourceList COMMA sqlSelectSource 
            {
              SqlSelectSourceList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlSelectSourceList l = (SqlSelectSourceList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlSelectSource c = (SqlSelectSource)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(32/*sqlSelectSourceList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sqlSelectOrderElementList ::= sqlSelectOrderElement 
            {
              SqlOrderElementList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlOrderElement c = (SqlOrderElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlOrderElementList(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*sqlSelectOrderElementList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sqlSelectOrderElementList ::= sqlSelectOrderElementList COMMA sqlSelectOrderElement 
            {
              SqlOrderElementList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlOrderElementList l = (SqlOrderElementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlOrderElement c = (SqlOrderElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*sqlSelectOrderElementList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sqlSelectColumnList ::= sqlSelectColumn 
            {
              SqlSelectColumnList RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlSelectColumn c = (SqlSelectColumn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlSelectColumnList(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*sqlSelectColumnList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sqlSelectColumnList ::= sqlSelectColumnList COMMA sqlSelectColumn 
            {
              SqlSelectColumnList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlSelectColumnList l = (SqlSelectColumnList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlSelectColumn c = (SqlSelectColumn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*sqlSelectColumnList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sqlSelect_order ::= 
            {
              SqlOrderElement RESULT = null;
		 RESULT = new SqlSelectOrderElementList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*sqlSelect_order*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sqlSelect_order ::= SQL_ORDER sqlSelectOrderElementList 
            {
              SqlOrderElement RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlOrderElementList l = (SqlOrderElementList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*sqlSelect_order*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sqlSelect_limit ::= 
            {
              SqlLimit RESULT = null;
		 RESULT = new SqlNoLimit(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*sqlSelect_limit*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sqlSelect_limit ::= SQL_LIMIT sqlExpression COMMA sqlExpression 
            {
              SqlLimit RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlExpr o = (SqlExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlExpr l = (SqlExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlSpecLimit(o, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*sqlSelect_limit*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sqlSelect_where ::= 
            {
              SqlExpr RESULT = null;
		 RESULT = new SqlConstBoolExpr(true); 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*sqlSelect_where*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sqlSelect_where ::= SQL_WHERE sqlExpression 
            {
              SqlExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlExpr e = (SqlExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = e; 
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*sqlSelect_where*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sqlSelect_from ::= 
            {
              SqlSelectSourceList RESULT = null;
		 RESULT = new SqlSelectSourceList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*sqlSelect_from*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sqlSelect_from ::= SQL_FROM sqlSelectSourceList 
            {
              SqlSelectSourceList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlSelectSourceList l = (SqlSelectSourceList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*sqlSelect_from*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sqlSelect ::= SQL_SELECT sqlSelectColumnList sqlSelect_from sqlSelect_where sqlSelect_order sqlSelect_limit 
            {
              SqlSelect RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SqlSelectColumnList c = (SqlSelectColumnList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SqlSelectSourceList f = (SqlSelectSourceList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SqlExpr w = (SqlExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlOrderElement o = (SqlOrderElement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SqlLimit l = (SqlLimit)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SqlSelect(c, f, w, o, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*sqlSelect*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // index_dekl ::= UNIQUE OPEN string_list CLOSE 
            {
              IndexDekl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StringList l = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IndexDekl(false, true, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*index_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // index_dekl ::= FULLTEXT UNIQUE OPEN string_list CLOSE 
            {
              IndexDekl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StringList l = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IndexDekl(true, true, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*index_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // index_dekl ::= INDEX OPEN string_list CLOSE 
            {
              IndexDekl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StringList l = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IndexDekl(false, false, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*index_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // index_dekl ::= FULLTEXT INDEX OPEN string_list CLOSE 
            {
              IndexDekl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StringList l = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new IndexDekl(true, false, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*index_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // index_dekl_list ::= index_dekl 
            {
              IndexDeklList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		IndexDekl e = (IndexDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new IndexDeklList(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*index_dekl_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // index_dekl_list ::= index_dekl COMMA index_dekl_list 
            {
              IndexDeklList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		IndexDekl e = (IndexDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		IndexDeklList l = (IndexDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*index_dekl_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tableDekl_indices ::= 
            {
              IndexDeklList RESULT = null;
		 RESULT = new IndexDeklList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*tableDekl_indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tableDekl_indices ::= INDICES OPEN index_dekl_list CLOSE 
            {
              IndexDeklList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IndexDeklList l = (IndexDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*tableDekl_indices*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tableDekl_data ::= 
            {
              ColumnDeklList RESULT = null;
		 RESULT = new ColumnDeklList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*tableDekl_data*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tableDekl_data ::= DATA OPEN column_dekl_list CLOSE 
            {
              ColumnDeklList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ColumnDeklList l = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*tableDekl_data*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tableDekl_primary ::= 
            {
              ColumnDeklList RESULT = null;
		 RESULT = new ColumnDeklList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*tableDekl_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tableDekl_primary ::= PRIMARY OPEN column_dekl_list CLOSE 
            {
              ColumnDeklList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ColumnDeklList l = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*tableDekl_primary*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // selectDekl ::= DEFINE SELECT_DEF IDENT optionalParamList OPEN sqlSelect CLOSE 
            {
              SelectDekl RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ColumnDeklList p = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SqlSelect s = (SqlSelect)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new SelectDekl(n, p, s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*selectDekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tableDekl ::= DEFINE TABLE IDENT optionalBracedIdent OPEN tableDekl_primary tableDekl_data tableDekl_indices CLOSE 
            {
              TableDekl RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int primleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int primright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ColumnDeklList prim = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dataleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dataright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ColumnDeklList data = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int indleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IndexDeklList ind = (IndexDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TableDekl(n, p, prim, data, ind); 
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*tableDekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // blockList ::= block 
            {
              ProjectDeklBlockList RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ProjectDeklBlock b = (ProjectDeklBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ProjectDeklBlockList(b); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*blockList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // blockList ::= block blockList 
            {
              ProjectDeklBlockList RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProjectDeklBlock b = (ProjectDeklBlock)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ProjectDeklBlockList l = (ProjectDeklBlockList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(b); 
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*blockList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // block ::= tableDekl 
            {
              ProjectDeklBlock RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		TableDekl d = (TableDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // block ::= selectDekl 
            {
              ProjectDeklBlock RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		SelectDekl d = (SelectDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // block ::= enum_dekl 
            {
              ProjectDeklBlock RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		EnumDekl d = (EnumDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = d; 
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*block*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // string_list ::= IDENT 
            {
              StringList RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new StringList(s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*string_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // string_list ::= string_list COMMA IDENT 
            {
              StringList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		StringList l = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*string_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // enum_dekl ::= DEFINE TYPE LBRACE ENUM_DEF RBRACE IDENT OPEN ident_list CLOSE 
            {
              EnumDekl RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StringList o = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new EnumDekl(s, o); 
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*enum_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nonnullable_column_dekl ::= REFERENCE LBRACE IDENT DOT IDENT RBRACE 
            {
              NonNullableColumnDekl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ColumnReferenceType(t, c); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nonnullable_column_dekl ::= REFERENCE LBRACE IDENT RBRACE 
            {
              NonNullableColumnDekl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TableReferenceType(t); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nonnullable_column_dekl ::= ENUM LBRACE IDENT RBRACE 
            {
              NonNullableColumnDekl RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new EnumType(s); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nonnullable_column_dekl ::= DOUBLE 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new DoubleType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nonnullable_column_dekl ::= ID 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new IDType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nonnullable_column_dekl ::= TEXT 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new TextType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nonnullable_column_dekl ::= CHAR 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new CharType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nonnullable_column_dekl ::= BOOL 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new BooleanType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nonnullable_column_dekl ::= INT 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new IntType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nonnullable_column_dekl ::= DATETIME 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new DateTimeType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nonnullable_column_dekl ::= TIME 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new TimeType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nonnullable_column_dekl ::= DATE 
            {
              NonNullableColumnDekl RESULT = null;
		 RESULT = new DateType(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nonnullable_column_dekl ::= STRING LBRACE INTCONST RBRACE 
            {
              NonNullableColumnDekl RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StringType(l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*nonnullable_column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // column_type_dekl ::= nonnullable_column_dekl 
            {
              ColumnDeklType RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		NonNullableColumnDekl r = (NonNullableColumnDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = r; 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*column_type_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // column_type_dekl ::= NULLABLE nonnullable_column_dekl 
            {
              ColumnDeklType RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		NonNullableColumnDekl r = (NonNullableColumnDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new NullableColumnDekl(r); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*column_type_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // default_value ::= 
            {
              DefaultValue RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*default_value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // default_value ::= EQ BOOLCONST 
            {
              DefaultValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new DefaultConstBool(v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*default_value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // default_value ::= EQ STRINGCONST 
            {
              DefaultValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new DefaultConstString(v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*default_value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // default_value ::= EQ INTCONST 
            {
              DefaultValue RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new DefaultConstInt(v); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*default_value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // default_value ::= EQ NULL 
            {
              DefaultValue RESULT = null;
		 RESULT = new DefaultConstNull(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*default_value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // default_value ::= EQ AUTO_ID 
            {
              DefaultValue RESULT = null;
		 RESULT = new DefaultAuto(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*default_value*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // optionalBracedIdent ::= 
            {
              String RESULT = null;
		 RESULT = null; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*optionalBracedIdent*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // optionalBracedIdent ::= LBRACE IDENT RBRACE 
            {
              String RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*optionalBracedIdent*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // optionalParamList ::= 
            {
              ColumnDeklList RESULT = null;
		 RESULT = new ColumnDeklList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*optionalParamList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // optionalParamList ::= LBRACE RBRACE 
            {
              ColumnDeklList RESULT = null;
		 RESULT = new ColumnDeklList(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*optionalParamList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalParamList ::= LBRACE column_dekl_list RBRACE 
            {
              ColumnDeklList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ColumnDeklList l = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = l; 
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*optionalParamList*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // column_dekl_list ::= column_dekl 
            {
              ColumnDeklList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ColumnDekl e = (ColumnDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ColumnDeklList(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*column_dekl_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // column_dekl_list ::= column_dekl_list COMMA column_dekl 
            {
              ColumnDeklList RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ColumnDeklList l = (ColumnDeklList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ColumnDekl e = (ColumnDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*column_dekl_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // column_dekl ::= IDENT OLBRACE INTCONST ORBRACE optionalBracedIdent AS column_type_dekl default_value 
            {
              ColumnDekl RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ColumnDeklType t = (ColumnDeklType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DefaultValue d = (DefaultValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new ArrayColumnDekl(s, l, p, t, d); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // column_dekl ::= IDENT optionalBracedIdent AS column_type_dekl default_value 
            {
              ColumnDekl RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ColumnDeklType t = (ColumnDeklType)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		DefaultValue d = (DefaultValue)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new SingleColumnDekl(s, p, t, d); 
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*column_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // package_path ::= 
            {
              PackageDekl RESULT = null;
		 RESULT = new PackageDekl1(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*package_path*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // package_path ::= DOT IDENT package_path 
            {
              PackageDekl RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		PackageDekl p = (PackageDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new PackageDekl0(s, p); 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*package_path*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_dekl ::= 
            {
              PackageDekl RESULT = null;
		 RESULT = new PackageDekl1(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*package_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_dekl ::= PACKAGE IDENT package_path SC 
            {
              PackageDekl RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PackageDekl p = (PackageDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PackageDekl0(r, p); 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*package_dekl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ident_list ::= IDENT 
            {
              StringList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new StringList(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*ident_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ident_list ::= IDENT COMMA ident_list 
            {
              StringList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		StringList l = (StringList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = l.append(e); 
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*ident_list*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= project EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Project start_val = (Project)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // project ::= PROJECT IDENT SC package_dekl blockList 
            {
              Project RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		PackageDekl p = (PackageDekl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ProjectDeklBlockList l = (ProjectDeklBlockList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT = new Project(i,p, l); 
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*project*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

