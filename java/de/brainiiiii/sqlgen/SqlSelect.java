/*
 * Generated by classgen, version 1.5
 * 11.10.13 11:54
 */
package de.brainiiiii.sqlgen;

public class SqlSelect implements SyntaxNode {

  private SyntaxNode parent;
  public SqlSelectColumnList cols;
  public SqlSelectSourceList from;
  public SqlExpr where;
  public SqlOrderElementList orderBy;
  public SqlLimit limit;

  public SqlSelect (SqlSelectColumnList cols, SqlSelectSourceList from, SqlExpr where, SqlOrderElementList orderBy, SqlLimit limit) {
    this.cols = cols;
    if (cols != null) cols.setParent(this);
    this.from = from;
    if (from != null) from.setParent(this);
    this.where = where;
    if (where != null) where.setParent(this);
    this.orderBy = orderBy;
    if (orderBy != null) orderBy.setParent(this);
    this.limit = limit;
    if (limit != null) limit.setParent(this);
  }

  public SyntaxNode getParent() {
    return parent;
  }

  public void setParent(SyntaxNode parent) {
    this.parent = parent;
  }

  public void accept(Visitor visitor) {
    visitor.visit(this);
  }

  public void childrenAccept(Visitor visitor) {
    if (cols != null) cols.accept(visitor);
    if (from != null) from.accept(visitor);
    if (where != null) where.accept(visitor);
    if (orderBy != null) orderBy.accept(visitor);
    if (limit != null) limit.accept(visitor);
  }

  public void traverseTopDown(Visitor visitor) {
    accept(visitor);
    if (cols != null) cols.traverseTopDown(visitor);
    if (from != null) from.traverseTopDown(visitor);
    if (where != null) where.traverseTopDown(visitor);
    if (orderBy != null) orderBy.traverseTopDown(visitor);
    if (limit != null) limit.traverseTopDown(visitor);
  }

  public void traverseBottomUp(Visitor visitor) {
    if (cols != null) cols.traverseBottomUp(visitor);
    if (from != null) from.traverseBottomUp(visitor);
    if (where != null) where.traverseBottomUp(visitor);
    if (orderBy != null) orderBy.traverseBottomUp(visitor);
    if (limit != null) limit.traverseBottomUp(visitor);
    accept(visitor);
  }

  public String toString() {
    return toString("");
  }

  public String toString(String tab) {
    StringBuffer buffer = new StringBuffer();
    buffer.append(tab);
    buffer.append("SqlSelect(\n");
      if (cols != null)
        buffer.append(cols.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (from != null)
        buffer.append(from.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (where != null)
        buffer.append(where.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (orderBy != null)
        buffer.append(orderBy.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
      if (limit != null)
        buffer.append(limit.toString("  "+tab));
      else
        buffer.append(tab+"  null");
    buffer.append("\n");
    buffer.append(tab);
    buffer.append(") [SqlSelect]");
    return buffer.toString();
  }
}
